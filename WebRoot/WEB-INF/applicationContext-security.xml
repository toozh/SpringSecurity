<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:sec="http://www.springframework.org/schema/security"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
        http://www.springframework.org/schema/security  
        http://www.springframework.org/schema/security/spring-security-3.2.xsd">  
  
    <!-- 配置不过滤的资源（静态资源及登录相关） -->  
    <sec:http pattern="/**/*.css" security="none"></sec:http>  
    <sec:http pattern="/**/*.jpg" security="none"></sec:http>  
    <sec:http pattern="/**/*.jpeg" security="none"></sec:http>  
    <sec:http pattern="/**/*.gif" security="none"></sec:http>  
    <sec:http pattern="/**/*.png" security="none"></sec:http>  
    <sec:http pattern="/js/*.js" security="none"></sec:http>  
      
    <sec:http pattern="/getCode" security="none" /><!-- 不过滤验证码 -->  
    <sec:http pattern="/test/**" security="none"></sec:http><!-- 不过滤测试内容 -->  
      
    <sec:http auto-config="true" use-expressions="true" access-decision-manager-ref="accessDecisionManager">  
          
        <sec:form-login login-page="/login.jsp"
        				authentication-failure-url="/login.jsp" 
        				default-target-url="/login.do"
        				authentication-success-handler-ref="authenticationSuccessHandler" />
      	<sec:remember-me />
        				
        <sec:logout invalidate-session="true"  
      			logout-success-url="/login.jsp"  
      			logout-url="/j_spring_security_logout"/>
        <!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前，  实现用户、角色、权限、资源的数据库管理。  -->
  		<sec:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/> 
    </sec:http> 
    
    
    <!-- 修改ROLE前缀 -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">  
	    <constructor-arg name="decisionVoters">  
	        <list>  
	            <ref bean="roleVoter"/>  
	            <ref bean="authenticatedVoter"/>  
	        </list>  
	    </constructor-arg>  
	    <property name="messageSource" ref="messageSource"></property>  
	</bean>  
	  
	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
		<!-- 修改Value 即可 -->
	    <property name="rolePrefix" value="AUTH_"></property>
	</bean>  
	<bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter" /> 
    
    <!-- 登录成功后执行 可以控制跳转等 -->
    <bean id="authenticationSuccessHandler" class="com.zt.security.SimpleLoginSuccessHandler">  
    	<property name="defaultTargetUrl" value="/login.do"></property>
    	<property name="forwardToDestination" value="true"></property>
	</bean> 
    
     <!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性。  -->
 	<bean id="myFilter" class="com.zt.security.MyFilterSecurityInterceptor">
  		<property name="authenticationManager"  ref="authenticationManager"/>
  		<property name="accessDecisionManager" ref="myAccessDecisionManager"/>
  		<property name="securityMetadataSource"  ref="mySecurityMetadataSource"/>
 	</bean>
    <!-- 登录验证 -->
    <bean id="defaultUserDetailsService" class="com.zt.security.DefaultUserDetailsService" />
    <!-- 加载全部权限 -->
    <bean id="mySecurityMetadataSource" class="com.zt.security.MyInvocationSecurityMetadataSourceService" lazy-init="true">
		<constructor-arg name="resourcesDAO" ref="resourcesDAO"></constructor-arg>
	</bean>    
	<!-- 验证用户是否有权限 -->
    <bean id="myAccessDecisionManager" class="com.zt.security.MyAccessDecisionManager" />  
    
    <bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">  
	    <property name="hideUserNotFoundExceptions" value="false" />  
	    <property name="userDetailsService" ref="defaultUserDetailsService" />
	    <property name="messageSource" ref="messageSource" />
	    <property name="passwordEncoder" ref="passwordEncode" />
    	<property name="saltSource" ref="saltSource" />
	</bean>  
    
    
    <!-- 密码加密 -->
	<bean id="passwordEncode" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />  
	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">  
	    <property name="userPropertyToUse" value="username"/>
	</bean>
	
    <sec:authentication-manager alias="authenticationManager" erase-credentials="false">
        <sec:authentication-provider ref="authenticationProvider" />
    </sec:authentication-manager>  
    
</beans>  